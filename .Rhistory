summary(fit)$coef
lmF<-lm(Numeric~Year,hunger[hunger$Sex=="Female"])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
exit
library(swirl)
swirl()
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
View(dfbeta(fit))
View(out2)
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
0
info()
bye()
library(swirl)
swirl()
library(swirl)
swirl()
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
View(dfbeta(fit))
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
View(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,wich=2)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
View(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
?vif
??vif
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
fit2$coefficients[3]
plot(fit1)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
compare <- anova(fit1, fit2)
compare$Pr
data(mtcars)
fit1 <- lm(mpg~factor(cyl) + wt, data=mtcars)
fit2 <- update(fit1, mpg~factor(cyl) + wt + wt*factor(cyl))
summary(fit1)
summary(fit2)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
influence.measures(fit)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
influence.measures(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
influence.measures(fit)
dfbetas(fit)
test<-t.test(mtcars$mpg~mtcars$transmission,conf.level=0.95)
data(mtcars)
names(mtcars) <- c("mpg", "cylinders", "displacement", "horsepower", "axleratio",
mtcars$transmission <- factor(mtcars$transmission)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
mtcars$carburetors <- factor(mtcars$carburetors)
mtcars$vs <- factor(mtcars$vs)
levels(mtcars$transmission) <- c("automatic", "manual")
test<-t.test(mtcars$mpg~mtcars$transmission,conf.level=0.95)
data(mtcars)
names(mtcars) <- c("mpg", "cylinders", "displacement", "horsepower", "axleratio",
"weight","qmiletime","vs","transmission", "gears","carburetors")
mtcars$transmission <- factor(mtcars$transmission)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
mtcars$carburetors <- factor(mtcars$carburetors)
mtcars$vs <- factor(mtcars$vs)
levels(mtcars$transmission) <- c("automatic", "manual")
test<-t.test(mtcars$mpg~mtcars$transmission,conf.level=0.95)
test
t.test(mpg~transmission,data=mtcars)
cor.test(mtcars$mpg,mtcars$transmission)
cor.test(mtcars$mpg,as.numeric(mtcars$transmission))
fit<-lm(mpg~transmission,mtcars)
summary(fit)
fit$fitted.values
fit$qr
fit
summary(fit)
str(fit)
summary(fit)
kk<-summary(fit)
kk$r.squared
sfit<-summary(fit)
sfit$coefficients
cofe(sfit)
coef(sfit)
coef(sfit)[2,2]
coef(sfit)[2,1]
sfit<-summary(fit)
sfit
fit
sfit
fit
lm(mpg~transmission,mtcars)
test
fitPlot<-ggplot(mtcars,aes(transmission,mpg))+ geom_point()+ geom_smooth(method="lm")
library(ggplot2)
fitPlot<-ggplot(mtcars,aes(transmission,mpg))+ geom_point()+ geom_smooth(method="lm")
fitPlot
plot(fit)
anova(mtcars)
anova(fit)
test$conf.int
confint(fit, level=0.95) # CIs for model parameters
cor(mtcars)
cor(mtcars,mtcars)
cor(mtcars$mpg,mtcars[,-1])
data(mtcars)
cor(mtcars$mpg,mtcars[,-1])
cor(mtcars$mpg,as.numeric(mtcars[,-1])
)
cor(mtcars$mpg,mtcars[,-1])
data(mtcars)
names(mtcars) <- c("mpg", "cylinders", "displacement", "horsepower", "axleratio",
"weight","qmiletime","vs","transmission", "gears","carburetors")
mtcars$transmission <- factor(mtcars$transmission)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
mtcars$carburetors <- factor(mtcars$carburetors)
mtcars$vs <- factor(mtcars$vs)
levels(mtcars$transmission) <- c("automatic", "manual")
test<-t.test(mpg~transmission,data=mtcars)
test
cor(mtcars$mpg,mtcars[,-1])
all.fit <- lm(mpg ~ ., data=mtcars)
reduced.fit<-step(all.fit,direction="backward",k=2,trace=0)
step.fit<-step(lm(data = mtcars, mpg ~ .),trace=0,steps=10000)
equal(reduced.fit,step.fit)
reduced.fit
reduced.fit$call
step.fit$call
all.fit <- lm(mpg ~ ., data=mtcars)
step.fit<-step(all.fit,trace=0,steps=10000)
summary(step.fit)
s_step.fit<-summary(step.fit)
s_step.fit$fstatistic
s_step.fit
s_step.fit$fstatistic
t_step.fit<-t.test(s_step.fit)
t_step.fit
t_step.fit
t_step.fit<-t.test(s_step.fit)
t_step.fit
t.test(s_step.fit)
t_step.fit<-t.test(s_step.fit$call)
s_step.fit
s_step.fit$terms
s_step.fit$aliased
s_step.fit$sigma
s_step.fit$cov.unscaled
s_step.fit$fstatistic
str(s_step.fit)
str(step.fit)
str(summary(step.fit))
s_step.fit
coef(step.fit)
s_step.fit
s_step.fit$r.squared
anova(fit,step.fit)
step.fit$model
step.fit$call
s_step.fit$r.squared
s_step.fit$r.squared
step.fit$call
s_step.fit$call
s_step.fit$call$formula
s_step.fit$call$formula
formula<-s_step.fit$call$formula
formula<-s_step.fit$call$formula
formula<-as.character(formula)
class(formula)
step.fit
summary(step.fit)
rcoef(sfit)[2,1]
s_step.fit
formula
par(mfrow=c(1,1))
termplot(step.fit, terms="preTestScore")
library(swirl)
swirl()
library(swirl)
swirl()
rpg1()
load(rpg1)
rgp1()
rgp2()
View(swiss)
mdl<-fit(Fertility~.,swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education)
fit3<-lm(Fertility~Agriculture+Examination+Education,swiss)
anova(fit1,fit3)
library(swirl)
swirl()
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education,swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviancd(fit1)-deviance(fit3))/2
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
library(swirl)
swirl()
View(ravenData)
mdl<-glm(ravenWinNum~ravenScore,binomial,ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl<-glm(visists~date,poisson,hits)
mdl<-glm(visits~date,poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95,lambda)
mdl2<-glm(visits~date,poisson,hits,offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset= log(visits + 1))
qpois(.95,mdl2$fitted.values[704])
library(MASS)
data(shuttle)
View(shuttle)
fit<-glm(use~wind,shuttle,family = "binary")
fit<-glm(use~wind,shuttle,family = "binomial")
fit
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
exp(windtail)/exp(windhead)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windtail2)/exp(windhead2)
library(MASS)
data(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind, binomial, shuttle)
fit3 <- glm(1-auto ~ wind, binomial, shuttle)
fit$coefficients
fit3$coefficients
data(InsectSprays)
fit <- glm(count ~ spray - 1, family = "poisson", data = InsectSprays)
exp(fit$coef[1])/exp(fit$coef[2])
fit<-glm(count ~ factor(spray), family = poisson,data=InsectSprays,offset = log(count + 1))
summary(fit)$coef
fit2<-glm(count ~ factor(spray), family = poisson,data=InsectSprays,offset = log(10)+log(count+1))
summary(fit2)$coef
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit1)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit2)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windtail2)/exp(windhead2)
rm(ls())
library(caret)
install.packages("caret")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
summary(spam)
View(spam)
?abs
abs?
;
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(AlzheimerDisease)
View(AlzheimerDisease)
summary(AlzheimerDisease)
data(AlzheimerDisease)
AlzheimerDisease
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
View(training)
hist(x = training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(AlzheimerDisease)
View(training)
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
clear
clear()
cls()
clear?
;
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
summary(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
View(inTrain)
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
View(adDAta)
View(adData)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
install.packages("e1071")
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
View(training)
dim(training)
dim(testing)
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
A1
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
A2
install.packages(c("manipulate", "rmarkdown"))
install.packages("shiny")
getwd()
shiny::runApp('Documentos/MiFormacion/Coursera/Especializacion_Cientifico_de_Datos/09_Developing_Data_Products/Course_project/Solucion')
shiny::runApp('Documentos/MiFormacion/Coursera/Especializacion_Cientifico_de_Datos/09_Developing_Data_Products/Course_project/Solucion')
shiny::runApp('Documentos/MiFormacion/Coursera/Especializacion_Cientifico_de_Datos/09_Developing_Data_Products/Course_project/Solucion')
shiny::runApp('Documentos/MiFormacion/Coursera/Especializacion_Cientifico_de_Datos/09_Developing_Data_Products/Course_project/Solucion')
shiny::runApp('Documentos/MiFormacion/Coursera/Especializacion_Cientifico_de_Datos/09_Developing_Data_Products/Course_project/Solucion')
setwd("~/Documentos/MiFormacion/Coursera/Especializacion_Cientifico_de_Datos/09_Developing_Data_Products/Course_project/Solucion")
runApp(display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
library(slidify)
setwd("~/Documentos/MiFormacion/Coursera/Especializacion_Cientifico_de_Datos/09_Developing_Data_Products/Course_project/Solucion/slidify_presentation")
author("Sample_means_Exp")
## Slide 5
## Slide 5
shiny::runApp('~/Documentos/MiFormacion/Coursera/Especializacion_Cientifico_de_Datos/09_Developing_Data_Products/Course_project/Solucion/shiny_app')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
require(slidify)
slidify("index.Rmd")
